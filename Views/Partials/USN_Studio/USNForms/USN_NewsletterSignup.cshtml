@inherits UmbracoViewPage<USNWebsite.USNModels.USNNewsletterFormViewModel>

@using USNStarterKit.USNHelpers;

@{
    UsnglobalSettings globalSettings = (UsnglobalSettings)Umbraco.Content(Model.GlobalSettingsID);
    
    if (globalSettings.EmailMarketingPlatform.HasValue() && globalSettings.NewsletterApikey.HasValue() && (Model.FormSubscriberListID.HasValue()|| globalSettings.DefaultNewsletterSubscriberListID.HasValue()))
    {
        <div class="newsletter form ajax-wrap">
            <div class="inner @(Model.FormColor)-bg @(Model.FormColor)-text">
                @using (Ajax.BeginForm("HandleNewsletterSubmit", "USNNewsletterSignupSurface", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "NS_" + Model.UniqueID,
                    LoadingElementId = "NAL_" + Model.UniqueID
                }))
                {
                    var containerId = "NSC_" + Model.UniqueID;
                    var errorId = "NE_" + Model.UniqueID;
                    var ajaxLoadingId = "NAL_" + Model.UniqueID;
                    var formId = "Form_" + Model.UniqueID;
                    var submissionId = "S_" + Model.UniqueID;

                    @Html.AntiForgeryToken()
                    @Html.Hidden("GlobalSettingsID", Model.GlobalSettingsID)
                    @Html.Hidden("UniqueID", Model.UniqueID)
                    @Html.Hidden("FormSubscriberListID", Model.FormSubscriberListID)
                    
                    if (Model.FormHeading.HasValue() || Model.FormIntroduction.HasValue() || Model.FormSecondaryHeading.HasValue())
                    {
                        <div class="info short-margin-bottom">

                            @if (Model.FormSecondaryHeading.HasValue())
                            {
                                <p class="secondary-heading @(Model.FormColor)-secondary-heading">@Model.FormSecondaryHeading</p>
                            }

                            @if (Model.FormHeading.HasValue())
                            {
                                @Html.Raw(String.Format("<{0} class=\"heading main {1}-heading\">{2}</{0}>", Model.FormHeading.HeadingTag, Model.FormColor, Model.FormHeading.Text))
                            }

                            @if (Model.FormIntroduction.HasValue())
                            {
                                <div class="text @(Model.FormColor)-text">
                                    @Html.Raw(Model.FormIntroduction)
                                </div>
                            }

                        </div>
                    }

                    <div id="@containerId" class="form-inner">
                        <div class="alert alert-danger" id="@errorId" style="display:none">
                        </div>
                        <div id="@formId">
                            <fieldset>
                                @if (!Model.FormHideFields)
                                {
                                    <div class="form-group">
                                        <label for="FirstName" class="control-label">
                                            @Umbraco.GetDictionaryValue("USN Form First Name Label") <em class="req">*</em>
                                        </label>
                                        @Html.TextBoxFor(x => Model.FirstName, new { @class = "form-control", aria_label = Umbraco.GetDictionaryValue("USN Form First Name Label"), placeholder = Umbraco.GetDictionaryValue("USN Form First Name Label") })
                                        @Html.ValidationMessageFor(x => Model.FirstName, Umbraco.GetDictionaryValue("USN Form First Name Validation"))
                                    </div>
                                    <div class="form-group">
                                        <label for="LastName" class="control-label">
                                            @Umbraco.GetDictionaryValue("USN Form Last Name Label") <em class="req">*</em>
                                        </label>
                                        @Html.TextBoxFor(x => Model.LastName, new { @class = "form-control", aria_label = Umbraco.GetDictionaryValue("USN Form Last Name Label"), placeholder = Umbraco.GetDictionaryValue("USN Form Last Name Label") })
                                        @Html.ValidationMessageFor(x => Model.LastName, Umbraco.GetDictionaryValue("USN Form Last Name Validation"))
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(x => Model.FirstName, new { @Value = "***" })
                                    @Html.HiddenFor(x => Model.LastName, new { @Value = "***" })
                                }
                                <div class="form-group">
                                    <label for="Email" class="control-label">
                                        @Umbraco.GetDictionaryValue("USN Form Email Address Label") <em class="req">*</em>
                                    </label>
                                    @Html.TextBoxFor(x => Model.Email, new { autocapitalize = "off", @class = "form-control", aria_label = Umbraco.GetDictionaryValue("USN Form Email Address Label"), placeholder = Umbraco.GetDictionaryValue("USN Form Email Address Label") })
                                    @Html.ValidationMessageFor(x => Model.Email, Umbraco.GetDictionaryValue("USN Form Email Address Validation"))
                                </div>
                                @if (globalSettings.GoogleReCaptchasiteKey.HasValue() && globalSettings.GoogleReCaptchasecretKey.HasValue())
                                {
                                    <div class="g-recaptcha" data-sitekey="@globalSettings.GoogleReCaptchasiteKey" data-size="@Model.CaptchaDataSize"></div>
                                }
                            </fieldset>
                            <fieldset class="buttons">
                                <button role="button" class="btn @(Model.FormButtonColor)-btn-bg @(Model.FormButtonColor)-btn-text @(Model.FormButtonColor)-btn-borders" type="submit">
                                    <span>@(Model.FormButtonText.HasValue() ? Model.FormButtonText : Umbraco.GetDictionaryValue("USN Form Submit Button"))</span>
                                </button>
                            </fieldset>
                            <div class="ajax-loading" id="@ajaxLoadingId" style="display:none">
                                <div class="loading">
                                    <span class="message">@Umbraco.GetDictionaryValue("USN Newsletter Form Sending Message")</span>
                                </div>
                            </div>
                        </div>
                        <div id="@submissionId" style="display:none">
                            <div class="alert alert-success"><div class="info">@Html.Raw(Model.FormSubmissionMessage)</div></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <p>@Html.Raw(Umbraco.GetDictionaryValue("USN Newsletter Form API Key Missing Error"))</p>
        </div>
    }
}