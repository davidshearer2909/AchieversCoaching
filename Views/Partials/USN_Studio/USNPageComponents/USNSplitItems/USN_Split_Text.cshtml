@inherits UmbracoViewPage<Usn_Pc_SplitComponent_AN>

@using USNStarterKit.USNHelpers;
@using USNStarterKit.USNModels;

@{
    //Starter kit compatibility: 1.0

    string splitSide = ViewData["splitSide"].ToString();
    string colWidthDesktop = splitSide == "First" ? "col-lg-" + Model.DesktopColumnWidthFirst : "col-lg-" + Model.DesktopColumnWidthSecond;
    string colWidthTablet = splitSide == "First" ? "col-md-" + Model.TabletColumnWidthFirst : "col-md-" + Model.TabletColumnWidthSecond;
    string itemDesktopOrder = ThemeHelper.GetSplitDesktopTabletOrderClass(splitSide, Model.DesktopTabletOrder);
    string itemMobileOrder = ThemeHelper.GetSplitMobileOrderClass(splitSide, Model.MobileOrder);
    string verticalAlignment = splitSide == "First" ? (Model.VerticalPositionFirst.HasValue() ? Model.VerticalPositionFirst.ToString() : String.Empty) : (Model.VerticalPositionSecond.HasValue() ? Model.VerticalPositionSecond.ToString() : String.Empty);
    string verticalAlignmentClass = ThemeHelper.GetVerticalAlignmentClass(verticalAlignment);

    USNHeading heading = splitSide == "First" ? Model.TextHeadingFirst : Model.TextHeadingSecond;
    string secondaryHeading = splitSide == "First" ? Model.TextSecondaryHeadingFirst : Model.TextSecondaryHeadingSecond;
    IHtmlString text = splitSide == "First" ? Model.TextFirst : Model.TextSecond;
    IEnumerable<USNMultiUrlPicker> buttons = splitSide == "First" ? Model.TextButtonsFirst : Model.TextButtonsSecond;
    USNAnimation animation = splitSide == "First" ? ThemeHelper.GetAnimationSettings(Model.AnimateFirst,Model.AnimationDelayFirst,Model.AnimationStyleFirst) : ThemeHelper.GetAnimationSettings(Model.AnimateSecond,Model.AnimationDelaySecond,Model.AnimationStyleSecond);

    string textAlignment = splitSide == "First" ? Model.TextAlignmentFirst : Model.TextAlignmentSecond;
    string textAlignmentClass = ThemeHelper.GetSimpleTextAlignmentClass(textAlignment);

    <div class="item item_block item_text-block @verticalAlignmentClass @colWidthDesktop @colWidthTablet @itemDesktopOrder @itemMobileOrder col-12 @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay">
        <div class="info @textAlignmentClass">
            @if (secondaryHeading.HasValue())
            {
                <p class="secondary-heading @Model.BackgroundColor.label-secondary-heading @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay">@secondaryHeading</p>
            }

            @if (heading.HasValue())
            {
                @Html.Raw(String.Format("<{0} class=\"heading main {1}-heading\">{2}</{0}>", heading.HeadingTag, Model.BackgroundColor.label, heading.Text))
            }
            @if (text.HasValue())
            {
                <div class="text @Model.BackgroundColor.label-text @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay">
                    @Html.Raw(text)
                </div>
            }
            @if (buttons.HasValue())
            {
                <p class="link @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay">
                    @foreach (var button in buttons)
                    {
                        <a class="btn @(button.color.label)-bg @(button.color.label)-text @(button.color.label)-borders" href="@button.link.LinkUrl" @Html.Raw(button.link.LinkTarget) @Html.Raw(button.link.LinkTitle)>@Html.Raw(button.icon)@button.link.LinkText@Html.Raw(button.link.LinkTargetIcon)</a>
                    }
                </p>
            }
        </div>
    </div>
}
